/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo_schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DemoSchema_003 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8744991088100237773L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DemoSchema_003\",\"namespace\":\"demo_schema\",\"fields\":[{\"name\":\"info\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"boolean\",\"default\":false},{\"name\":\"textBuffer\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"file\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"file\",\"namespace\":\"registryExample\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"buffer\",\"type\":\"bytes\"},{\"name\":\"extension\",\"type\":\"string\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DemoSchema_003> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DemoSchema_003> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DemoSchema_003> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DemoSchema_003> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DemoSchema_003> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DemoSchema_003 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DemoSchema_003 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DemoSchema_003 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DemoSchema_003 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence info;
  private boolean active;
  private java.nio.ByteBuffer textBuffer;
  private java.lang.CharSequence data;
  private java.lang.CharSequence type;
  private registryExample.file file;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DemoSchema_003() {}

  /**
   * All-args constructor.
   * @param info The new value for info
   * @param active The new value for active
   * @param textBuffer The new value for textBuffer
   * @param data The new value for data
   * @param type The new value for type
   * @param file The new value for file
   */
  public DemoSchema_003(java.lang.CharSequence info, java.lang.Boolean active, java.nio.ByteBuffer textBuffer, java.lang.CharSequence data, java.lang.CharSequence type, registryExample.file file) {
    this.info = info;
    this.active = active;
    this.textBuffer = textBuffer;
    this.data = data;
    this.type = type;
    this.file = file;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return info;
    case 1: return active;
    case 2: return textBuffer;
    case 3: return data;
    case 4: return type;
    case 5: return file;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: info = (java.lang.CharSequence)value$; break;
    case 1: active = (java.lang.Boolean)value$; break;
    case 2: textBuffer = (java.nio.ByteBuffer)value$; break;
    case 3: data = (java.lang.CharSequence)value$; break;
    case 4: type = (java.lang.CharSequence)value$; break;
    case 5: file = (registryExample.file)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'info' field.
   * @return The value of the 'info' field.
   */
  public java.lang.CharSequence getInfo() {
    return info;
  }


  /**
   * Sets the value of the 'info' field.
   * @param value the value to set.
   */
  public void setInfo(java.lang.CharSequence value) {
    this.info = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'textBuffer' field.
   * @return The value of the 'textBuffer' field.
   */
  public java.nio.ByteBuffer getTextBuffer() {
    return textBuffer;
  }


  /**
   * Sets the value of the 'textBuffer' field.
   * @param value the value to set.
   */
  public void setTextBuffer(java.nio.ByteBuffer value) {
    this.textBuffer = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.lang.CharSequence getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.CharSequence value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'file' field.
   * @return The value of the 'file' field.
   */
  public registryExample.file getFile() {
    return file;
  }


  /**
   * Sets the value of the 'file' field.
   * @param value the value to set.
   */
  public void setFile(registryExample.file value) {
    this.file = value;
  }

  /**
   * Creates a new DemoSchema_003 RecordBuilder.
   * @return A new DemoSchema_003 RecordBuilder
   */
  public static demo_schema.DemoSchema_003.Builder newBuilder() {
    return new demo_schema.DemoSchema_003.Builder();
  }

  /**
   * Creates a new DemoSchema_003 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DemoSchema_003 RecordBuilder
   */
  public static demo_schema.DemoSchema_003.Builder newBuilder(demo_schema.DemoSchema_003.Builder other) {
    if (other == null) {
      return new demo_schema.DemoSchema_003.Builder();
    } else {
      return new demo_schema.DemoSchema_003.Builder(other);
    }
  }

  /**
   * Creates a new DemoSchema_003 RecordBuilder by copying an existing DemoSchema_003 instance.
   * @param other The existing instance to copy.
   * @return A new DemoSchema_003 RecordBuilder
   */
  public static demo_schema.DemoSchema_003.Builder newBuilder(demo_schema.DemoSchema_003 other) {
    if (other == null) {
      return new demo_schema.DemoSchema_003.Builder();
    } else {
      return new demo_schema.DemoSchema_003.Builder(other);
    }
  }

  /**
   * RecordBuilder for DemoSchema_003 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DemoSchema_003>
    implements org.apache.avro.data.RecordBuilder<DemoSchema_003> {

    private java.lang.CharSequence info;
    private boolean active;
    private java.nio.ByteBuffer textBuffer;
    private java.lang.CharSequence data;
    private java.lang.CharSequence type;
    private registryExample.file file;
    private registryExample.file.Builder fileBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(demo_schema.DemoSchema_003.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.info)) {
        this.info = data().deepCopy(fields()[0].schema(), other.info);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.active)) {
        this.active = data().deepCopy(fields()[1].schema(), other.active);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.textBuffer)) {
        this.textBuffer = data().deepCopy(fields()[2].schema(), other.textBuffer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.file)) {
        this.file = data().deepCopy(fields()[5].schema(), other.file);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasFileBuilder()) {
        this.fileBuilder = registryExample.file.newBuilder(other.getFileBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DemoSchema_003 instance
     * @param other The existing instance to copy.
     */
    private Builder(demo_schema.DemoSchema_003 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.info)) {
        this.info = data().deepCopy(fields()[0].schema(), other.info);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.active)) {
        this.active = data().deepCopy(fields()[1].schema(), other.active);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.textBuffer)) {
        this.textBuffer = data().deepCopy(fields()[2].schema(), other.textBuffer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.file)) {
        this.file = data().deepCopy(fields()[5].schema(), other.file);
        fieldSetFlags()[5] = true;
      }
      this.fileBuilder = null;
    }

    /**
      * Gets the value of the 'info' field.
      * @return The value.
      */
    public java.lang.CharSequence getInfo() {
      return info;
    }


    /**
      * Sets the value of the 'info' field.
      * @param value The value of 'info'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setInfo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.info = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'info' field has been set.
      * @return True if the 'info' field has been set, false otherwise.
      */
    public boolean hasInfo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'info' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearInfo() {
      info = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setActive(boolean value) {
      validate(fields()[1], value);
      this.active = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearActive() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'textBuffer' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTextBuffer() {
      return textBuffer;
    }


    /**
      * Sets the value of the 'textBuffer' field.
      * @param value The value of 'textBuffer'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setTextBuffer(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.textBuffer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'textBuffer' field has been set.
      * @return True if the 'textBuffer' field has been set, false otherwise.
      */
    public boolean hasTextBuffer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'textBuffer' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearTextBuffer() {
      textBuffer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.lang.CharSequence getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setData(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'file' field.
      * @return The value.
      */
    public registryExample.file getFile() {
      return file;
    }


    /**
      * Sets the value of the 'file' field.
      * @param value The value of 'file'.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder setFile(registryExample.file value) {
      validate(fields()[5], value);
      this.fileBuilder = null;
      this.file = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'file' field has been set.
      * @return True if the 'file' field has been set, false otherwise.
      */
    public boolean hasFile() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'file' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public registryExample.file.Builder getFileBuilder() {
      if (fileBuilder == null) {
        if (hasFile()) {
          setFileBuilder(registryExample.file.newBuilder(file));
        } else {
          setFileBuilder(registryExample.file.newBuilder());
        }
      }
      return fileBuilder;
    }

    /**
     * Sets the Builder instance for the 'file' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public demo_schema.DemoSchema_003.Builder setFileBuilder(registryExample.file.Builder value) {
      clearFile();
      fileBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'file' field has an active Builder instance
     * @return True if the 'file' field has an active Builder instance
     */
    public boolean hasFileBuilder() {
      return fileBuilder != null;
    }

    /**
      * Clears the value of the 'file' field.
      * @return This builder.
      */
    public demo_schema.DemoSchema_003.Builder clearFile() {
      file = null;
      fileBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DemoSchema_003 build() {
      try {
        DemoSchema_003 record = new DemoSchema_003();
        record.info = fieldSetFlags()[0] ? this.info : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.active = fieldSetFlags()[1] ? this.active : (java.lang.Boolean) defaultValue(fields()[1]);
        record.textBuffer = fieldSetFlags()[2] ? this.textBuffer : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (fileBuilder != null) {
          try {
            record.file = this.fileBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("file"));
            throw e;
          }
        } else {
          record.file = fieldSetFlags()[5] ? this.file : (registryExample.file) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DemoSchema_003>
    WRITER$ = (org.apache.avro.io.DatumWriter<DemoSchema_003>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DemoSchema_003>
    READER$ = (org.apache.avro.io.DatumReader<DemoSchema_003>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.info);

    out.writeBoolean(this.active);

    out.writeBytes(this.textBuffer);

    if (this.data == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.data);
    }

    out.writeString(this.type);

    if (this.file == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.file.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.info = in.readString(this.info instanceof Utf8 ? (Utf8)this.info : null);

      this.active = in.readBoolean();

      this.textBuffer = in.readBytes(this.textBuffer);

      if (in.readIndex() != 1) {
        in.readNull();
        this.data = null;
      } else {
        this.data = in.readString(this.data instanceof Utf8 ? (Utf8)this.data : null);
      }

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.file = null;
      } else {
        if (this.file == null) {
          this.file = new registryExample.file();
        }
        this.file.customDecode(in);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.info = in.readString(this.info instanceof Utf8 ? (Utf8)this.info : null);
          break;

        case 1:
          this.active = in.readBoolean();
          break;

        case 2:
          this.textBuffer = in.readBytes(this.textBuffer);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.data = null;
          } else {
            this.data = in.readString(this.data instanceof Utf8 ? (Utf8)this.data : null);
          }
          break;

        case 4:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.file = null;
          } else {
            if (this.file == null) {
              this.file = new registryExample.file();
            }
            this.file.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










